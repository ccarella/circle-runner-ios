#!/bin/bash

# Diagnostic script for PrincessSavesTheKing project

echo "üîç Checking PrincessSavesTheKing Project Status..."
echo "================================================"

# Check Xcode command line tools
echo -e "\nüì± Xcode Status:"
if command -v xcodebuild &> /dev/null; then
    echo "‚úÖ xcodebuild found"
    xcodebuild -version
else
    echo "‚ùå xcodebuild not found"
fi

# Check if we can use xcrun
if command -v xcrun &> /dev/null; then
    echo "‚úÖ xcrun found"
    echo "Developer dir: $(xcode-select -p)"
else
    echo "‚ùå xcrun not found"
fi

# List Swift files
echo -e "\nüìÑ Swift Files Structure:"
find PrincessSavesTheKing -name "*.swift" -type f | sort | while read file; do
    echo "  ‚úì $file"
done

# Check for missing files referenced in project
echo -e "\nüîç Checking project file references..."
if [ -f "PrincessSavesTheKing.xcodeproj/project.pbxproj" ]; then
    echo "‚úÖ Project file exists"
    
    # List schemes
    echo -e "\nüìã Available schemes:"
    xcodebuild -project PrincessSavesTheKing.xcodeproj -list 2>/dev/null || echo "Could not list schemes"
else
    echo "‚ùå Project file not found"
fi

# Check for common issues
echo -e "\n‚ö†Ô∏è  Checking for common issues:"

# Check if DerivedData exists
if [ -d ~/Library/Developer/Xcode/DerivedData/PrincessSavesTheKing-* ]; then
    echo "‚ö†Ô∏è  Old DerivedData found - consider cleaning"
else
    echo "‚úÖ No old DerivedData found"
fi

# Check if build folder exists
if [ -d "build" ]; then
    echo "‚ö†Ô∏è  Build folder exists - will be cleaned during build"
else
    echo "‚úÖ No build folder found"
fi

echo -e "\n‚ú® Diagnostic complete!"